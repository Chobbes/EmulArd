#+TITLE: EmulArd Documentation
#+AUTHOR: Calvin Beck
#+OPTIONS: ^:{}

* Arduino Program Clients
  Each Arduino program acts as a client to a server which actually
  pretends to be an Arduino. The program written for the Arduino
  actually communicates with the server via a protocol over stdin and
  stdout in order to set pin values and talk over serial to a virtual
  Arduino.
** Protocol
   We assume that everything is running on the same computer, so
   endianness, and integer sizes should not be different between the
   server and clients.
*** Serial
**** Serial Begin
     Pretend that we are initializing the serial port to a certain baud
     rate.

     : SERIAL_BEGIN <PORT_NUMBER> <BAUD_RATE>

     Arguments:
     - PORT_NUMBER: unsigned int for the serial port (Serial, Serial1, e.t.c.)
     - BAUD_RATE: unsigned long for the baud rate of the serial port.
     
     No response from the server.
**** Serial Write
     Send a single character over serial port.

     : SERIAL_WRITE <PORT_NUMBER> <uint8_t>

     Arguments:
     - PORT_NUMBER: unsigned int for the serial port (Serial, Serial1, e.t.c.)
     - uint8_t: byte sent over - probably just a character..

     No response from the server.
**** Serial Read
     Read a single byte from the serial port.

     : SERIAL_READ <PORT_NUMBER>

     Arguments:
     - PORT_NUMBER: unsigned int for the serial port (Serial, Serial1, e.t.c.)

     Returns a single int representing the character read from the
     serial port. This may be -1 if there were no characters available
     on the serial port.
**** Serial Peek
     Peek a single byte from the serial port.

     : SERIAL_PEEK <PORT_NUMBER>

     Arguments:
     - PORT_NUMBER: unsigned int for the serial port (Serial, Serial1, e.t.c.)

     Returns a single int representing the character that would be
     read from the serial port. This may be -1 if there were no
     characters available on the serial port.
**** Serial Available
     Check how many characters are available on the serial port.

     : SERIAL_AVAILABLE <PORT_NUMBER>

     Arguments:
     - PORT_NUMBER: unsigned int for the serial port (Serial, Serial1, e.t.c.)

     Returns an int for the number of characters waiting on the serial port.
*** Digital Pins
**** Digital Write
     Write to a digital pin.

     : DIGITAL_WRITE <PIN_NUMBER> <VALUE>

     Arguments:
     - PIN_NUMBER: uint8_t for the digital pin number.
     - VALUE: uint8_t to write to the digital pin. Should be HIGH or LOW.

     No response from the server.
**** Digital Read
     Read a value from a digital pin.

     : DIGITAL_READ <PIN_NUMBER>

     Arguments:
     - PIN_NUMBER: uint8_t for the digital pin number.

     Returns an int for the value of the pin.

*** Analog Pins
**** Analog Write
     Write to an analog pin.

     : ANALOG_WRITE <PIN_NUMBER> <VALUE>

     Arguments:
     - PIN_NUMBER: uint8_t for the analog pin number.
     - VALUE: int value to write to the pin.

     No response from the server.
**** Analog Read
     Read a value from an analog pin.

     : ANALOG_READ <PIN_NUMBER>

     Arguments:
     - PIN_NUMBER: uint8_t for the analog pin number.

     Returns an int for the value of the pin.
*** Pin Mode
    Set a pin's mode.

    : PIN_MODE <PIN_NUMBER> <MODE>

    Arguments:
    - PIN_NUMBER: uint8_t for the digital pin number.
    - MODE: A uint8_t for the mode. Should be INPUT, OUTPUT, or INPUT_PULLUP.

    No response from the server.
* Arduino Networks
  Since the individual Arduino programs execute the protocol via STDIO
  we can simply execute multiple Arduino processes, and have pipes to
  each one so that we can have a server which handles connections
  between multiple Arduinos.

** Networking Program
   Emulard provides a program which executes a bundle of Arduino
   programs and creates a network of them. Each Arduino will be
   assigned a pseudo TTY for Serial connections as well (though this
   can safely be ignored it will by default print which Arduino
   received which pseudo TTY).

   This program reads a .ard file which specifies what the network is
   and provides paths to each of the executables.

   Each .ard file consists of two sections. The first section
   declares the virtual arduinos, and the second section specifies
   the connections between these virtual Arduino programs.

   Note that all pin specifications are the final pin values in the
   fake Arduino's pin array. For instance in the case of the mega
   analog pin 0 is actually pin 54.

*** Declarations
     The declaration section consists of entries of the form

     : d <NAME> : <PATH>

     Where name is a _unique_ identifier for the Arduino, and path is
     the path to the desired executable file for the Arduino
     program. This name should not include colons, spaces,
     semi-colons, slashes, e.t.c.

*** Connection Specifications
    After all of the declarations have been performed (and /only/
    after), we may create a list of connections as follows...

    Pin connections are unidirectional and are made like

    : p <NAME> : <PIN> <NAME> : <PIN>

    In this case the first Arduino's pin is an output which connects
    to the second Arduino's input pin. '<PIN>' is an integer value.

    : s <NAME> : <PORT> <NAME> : <PORT>

    Is a bidirectional serial connection between the two Arduinos
    where '<PORT>' is just an integer, and represents one of the
    serial ports on the Arduino.

*** Comments
    The .ard files support line comments, and ignores all
    whitespace. The line comments are created with the '#'
    character. Anything after a '#' is ignored by the parser until a
    newline is encountered.
